#!/usr/bin/env ruby
# Tiller - Dynamic configuration generator, intended for use in Dockerfiles
# Named from the first ship-building (Docker) related term I could find that didn't have an existing gem named after it!
# Mark Round <github@markround.com>

VERSION='0.0.4'

require 'erb'
require 'ostruct'
require 'yaml'
require 'fileutils'
require 'pp'

# This is needed so we can enumarate all the loaded plugins later
class Class
  def subclasses
    ObjectSpace.each_object(Class).select { |c| c < self }
  end
end

def warn_merge(key, old, new, type, source)
  puts "Warning, merging duplicate #{type} values."
  puts "#{key} => '#{old}' being replaced by : '#{new}' from #{source}"
  new
end

module Tiller

  # Set these two environment variables if you want to debug a configuration in a temporary directory.
  # EG: $ tiller_base=/tmp tiller_lib=/tmp/lib ./tiller
  config = {
      :tiller_base  => (ENV['tiller_base'].nil?)  ? '/etc/tiller' : ENV['tiller_base'],
      :tiller_lib   => (ENV['tiller_lib'].nil?)   ? '/usr/local/lib' : ENV['tiller_lib'],
      # This is the main variable, usually the only one you pass into Docker.
      :environment  => (ENV['environment'].nil?)  ? 'production' : ENV['environment']
  }

  $LOAD_PATH.unshift(config[:tiller_lib]) unless $LOAD_PATH.include?(config[:tiller_lib])

  # User-provided sources.
  require 'tiller/templatesource.rb'
  require 'tiller/datasource.rb'

  # Load the common YAML configuration file
  config[:common_config] = YAML::load(open(File.join(config[:tiller_base], 'common.yaml')))

  puts "tiller v#{VERSION} (https://github.com/markround/tiller) <github@markround.com>"
  puts "Using configuration from #{config[:tiller_base]}"
  puts "Using plugins from #{config[:tiller_lib]}/tiller"
  puts "Using environment #{config[:environment]}"

  # Now load all our plugins
  template_sources = Array.new
  data_sources = Array.new
  template_sources |= config[:common_config]['template_sources']
  data_sources |= config[:common_config]['data_sources']
  template_sources.each { |t| require "tiller/template/#{t}.rb" }
  data_sources.each { |t| require "tiller/data/#{t}.rb" }

  puts 'Template sources loaded ' + TemplateSource.subclasses.to_s
  puts 'Data sources loaded ' + DataSource.subclasses.to_s

  # Get all Templates for the given environment
  templates = {}
  TemplateSource.subclasses.each do |template_class|
    ts = template_class.new(config)
    ts.templates.each do |t|
      templates[t]=ts.template(t)
    end
  end

  puts "Templates to build #{templates.keys.to_s}"

  # Now go through all our data sources and start to assemble our "tiller_global" hash.
  # As hashes are getting merged, new values will take precedence over older ones, and a warning will be displayed.
  # Add in environment ti start with as it's very useful for all templates.
  global_values = {'environment' => config[:environment]}
  DataSource.subclasses.each do |data_class|
    global_values.merge!(data_class.new(config).global_values) do |key, old, new|
      warn_merge(key, old, new, 'global', data_class.to_s)
    end
  end

  # Now we go through each template we've identified, and get the values for each one.
  templates.each do |template, content|
    values = Hash.new
    target_values = Hash.new
    puts "Building template #{template}"

    # Now we populate the hash with values from each DataSource, warning if we get duplicate values.
    DataSource.subclasses.each do |data_class|
      dc = data_class.new(config)
      values.merge!(dc.values(template)) do |key, old, new|
        warn_merge(key, old, new, 'data', data_class.to_s)
      end

      # Now get target_values (where the file should be installed to, permissions and so on)
      target_values.merge!(dc.target_values(template)) do |key, old, new|
        warn_merge(key, old, new, 'target', data_class.to_s)
      end
    end

    # Now, we build the template
    tiller = values.merge(global_values) do |key, old, new|
      warn_merge(key, old, new, 'global and local', 'merged configuration')
    end

    # Use an OpenStruct namespace, as it's way easier than faffing around with manual binding, and also
    # non-existing values just get replaced by <nil> instead of failing on errors.
    ns = OpenStruct.new(tiller)
    parsed_template = ERB.new(content).result(ns.instance_eval { binding })

    # Write the template, and also create the directory path if it doesn't exist.
    target_path = File.dirname(target_values['target'])
    FileUtils.mkdir_p(target_path) if not File.directory?(target_path)
    target = open(target_values['target'], "w")
    target.puts(parsed_template)
    target.close

    # Set permissions if we are running as root
    if Process::Sys.geteuid == 0 then
      puts "Setting ownership/permissions on #{target_values['target']}"
      FileUtils.chmod(target_values['perms'], target_values['target']) if target_values.has_key('perms')
      FileUtils.chown(target_values['user'], target_values['group'], target_values['target'])
    else
      puts "Not running as root, so not setting ownership/permissions on #{target_values['target']}"
    end

  end

  # All templates created, so let's handover to the replacement process then it's home in time for tea and medals.
  puts "Template generation completed, about to exec replacement process."
  puts "Calling #{config[:common_config]['exec']}..."
  exec(config[:common_config]['exec'])

end


